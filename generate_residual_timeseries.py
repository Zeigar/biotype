#!/usr/bin/env python
"""
Extracts timeseries from DATMAN that aren't generated by defaults (e.g.,
residuals of GLM outputs).
"""

import os, sys
import glob
import numpy as np
import nibabel as nib

def loadnii(filename):
    nifti = nib.load(filename)
    dims = nifti.shape
    nifti = nifti.get_data()
    if len(dims) == 3:
        dims = tuple(list(dims) + [1])
    nifti = nifti.reshape(dims[0]*dims[1]*dims[2], dims[3])

    return nifti


def extract_ts(rois, fmri):
    rois = loadnii(rois)
    fmri = loadnii(fmri)

    n_rois = len(np.unique(rois[rois > 0]))
    dims = np.shape(fmri)

    # loop through all ROIs, extracting mean timeseries.
    output = np.zeros((n_rois, dims[1]))

    for i, roi in enumerate(np.unique(rois[rois > 0])):
        idx = np.where(rois == roi)[0]

        if len(idx) > 0:
            output[i, :] = np.mean(fmri[idx, :], axis=0)

    return output


def main():
    archive_dir = '/archive/data'
    output_dir = '/projects/jviviano/data/xbrain/data'
    studies = {'SPINS': ['ea', 'imob'], 'DTI3T': ['imob']}

    for study in studies.keys():

        for experiment in studies[study]:

            subj_dir = os.path.join(archive_dir, study, 'pipelines/fmri', experiment)

            for subj in os.listdir(subj_dir):
                candidates = glob.glob(os.path.join(subj_dir, subj,) + '/*')
                timeseries = filter(lambda x: '_residuals' in x, candidates)
                rois = filter(lambda x: '_MNI-nonlin_rois' in x, candidates)

                for ts in timeseries:
                    basename = os.path.basename(ts).split('.')[0]
                    output = os.path.join(output_dir, basename + '_roi-timeseries.csv')

                    if not os.path.isfile(output):
                        # all roi files should be the same
                        data = extract_ts(rois[0], ts)
                        print('saving {}'.format(output))
                        np.savetxt(output, data, delimiter=',')

if __name__ == '__main__':
    main()

